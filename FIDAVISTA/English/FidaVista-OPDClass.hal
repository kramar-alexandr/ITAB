//This is a prototype.
//Take the customized things from this and merge it with the clients customized or standard OPDClass window.
//Tip: search for //cust

// external inner function Boolean IsStandardUnused();
// external inner function Boolean IsEnterprise();
// external inner function Boolean StandardHansa();
// external inner function Boolean HasATOL();

// external inner function Boolean HasAccPeriods();
// external inner function Boolean HasAccessGroups();
// external inner function Boolean HasAddFee();
// external inner function Boolean HasApprovals();
// external inner function Boolean HasCCPayments();
// external inner function Boolean HasAdvancedAccounting();
// external inner function Boolean HasAdvancedCRM();
// external inner function Boolean HasAdvancedPricing();
// external inner function Boolean HasAdvancedProduction();
// external inner function Boolean HasAdvancedStock();
// external inner function Boolean HasAged();
// external inner function Boolean HasBar();
// external inner function Boolean HasBase2();
// external inner function Boolean HasBranch();
// external inner function Boolean HasBuyBack();
// external inner function Boolean HasCategories();
// //external inner function Boolean HasConsigmentStock();
// external inner function Boolean HasCommunicator();
// external inner function Boolean HasConsignmentStock();
// external inner function Boolean HasContactClassification();
// external inner function Boolean HasContactRelations();
// external inner function Boolean HasConsolidation();
// external inner function Boolean HasCountryPerCustomer();
// external inner function Boolean HasCreditLimit();
// external inner function Boolean HasCustItem();
// external inner function Boolean HasCustomerSearchKey();
// external inner function Boolean HasCustomerStatusReport();
// external inner function Boolean HasDownpayments();
// external inner function Boolean HasDefineColumns();
// external inner function Boolean HasDeliveryAddress();
// external inner function Boolean HasDepartments();
// external inner function Boolean HasETaxDocuments();
// external inner function Boolean HasEInvoicing();
// external inner function Boolean HasEndorsedChecks();
// external inner function Boolean HasExtraNLComment();
// external inner function Boolean HasExtTax();
// external inner function Boolean HasFavouriteActTypes();
// external inner function Boolean HasFiscalPrinter();
// external inner function Boolean HasFormEditor();
// external inner function Boolean HasFreightAdvanced();
// external inner function Boolean HasHideCostPrice();
// external inner function Boolean HasHotelInterface();
// external inner function Boolean HasGuestUserDefined();
// external inner function Boolean HasJewelleryInterface();
// external inner function Boolean HasIncomeAndExpenseBook();
// external inner function Boolean HasIOUChecks();
// external inner function Boolean HasItemClassification();
// external inner function Boolean HasItemGroups();
// external inner function Boolean HasKPIs();
// external inner function Boolean HasLanguages();
// external inner function Boolean HasLimitedAccess();
// external inner function Boolean HasLocalMachines();
// external inner function Boolean HasLoyaltyCards();
// external inner function Boolean HasMailTags();
// external inner function Boolean HasMainPartner();
// external inner function Boolean HasMultiCurrency();
// external inner function Boolean HasMultiLocations();
// external inner function Boolean HasNLBudget();
// external inner function Boolean HasNLBudgetClass();
// external inner function Boolean HasObjects();
// external inner function Boolean HasInvoiceOfficialSerNr();
// external inner function Boolean HasOfficialSerNr();
// external inner function Boolean HasOrderClasses();
// external inner function Boolean HasPreferedOfficialSerNr();
// external inner function Boolean HasNumberSeries();
// external inner function Boolean HasPersons();
// external inner function Boolean HasPocketScreen();
// external inner function Boolean HasPositions();
// external inner function Boolean HasPrepayments();
// external inner function Boolean HasProjects();//very strange tag
// external inner function Boolean HasPriceLists();
// external inner function Boolean HasQualityControl();
// external inner function Boolean HasReconLevel2();
// external inner function Boolean HasReminderLevel();
// external inner function Boolean HasRemoteBackup();
// external inner function Boolean HasResourceDisplayGroups();
// external inner function Boolean HasRussianPrepayment();
// external inner function Boolean HasRetGoodsToSupp();
// external inner function Boolean HasReturnedGoods();
// external inner function Boolean HasRoomPackages();
// external inner function Boolean HasRoomTypes();
// external inner function Boolean HasRoute();
// external inner function Boolean HasSalesman();
// external inner function Boolean HasSalesmanBonus();
// external inner function Boolean HasSalesGroup();
// external inner function Boolean HasSecondQuantity();
// external inner function Boolean HasSerialNumbers();
// external inner function Boolean HasServerInCloud();
// external inner function Boolean HasSettlementDiscount();
// external inner function Boolean HasSimulations();
// external inner function Boolean hasSimAccruals();
// external inner function Boolean HasSkypeConnection();
// external inner function Boolean HasSIPServerConnection();
// external inner function Boolean HasStrAsSignFType();
// external inner function Boolean HasTouchScreenDevice();
// external inner function Boolean HasTaxMatrix();
// external inner function Boolean HasTestFeatures();
// external inner function Boolean HasMetroTestFeatures();
// external inner function Boolean HasWorkOrders();
// external inner function Boolean HasThrouLocation();
// external inner function Boolean HasTouchScreenLook();
// external inner function Boolean HasTREO();
// external inner function Boolean HasVarieties();
// external inner function Boolean HasVATZone();
// external inner function Boolean HasWithholdingTax();
// external inner function Boolean HasWithholdingTaxAdvanced();
// external inner function Boolean HasWorkOrders();
// external inner function Boolean HasWorkflowOverview();

// external inner function Boolean HasStandardCRM();
// external inner function Boolean HasStandardOrganizer();
// external inner function Boolean HasStandardCommunicator();

// external inner function Boolean HasEMail();
// external inner function Boolean HasexternalEMail();

// external inner function Boolean HasModAT2();
// external inner function Boolean HasModBA();
// external inner function Boolean HasModCheck();
// external inner function Boolean HasModCL();
// external inner function Boolean HasModCO();
// external inner function Boolean HasModCons();
// external inner function Boolean HasModCourses();
// external inner function Boolean HasModCredMan();
// external inner function Boolean HasModCRM();
// external inner function Boolean HasModEDI();
// external inner function Boolean HasModExp();
// external inner function Boolean HasModHotel();
// external inner function Boolean HasModHRM();
// external inner function Boolean HasModIN();
// external inner function Boolean HasModIntStock();
// external inner function Boolean HasModNL();
// external inner function Boolean HasPaymentGateway();
// external inner function Boolean HasModPO();
// external inner function Boolean HasModPOS();
// external inner function Boolean HasModPL();
// external inner function Boolean HasModPOProg();
// external inner function Boolean HasModPP();
// external inner function Boolean HasModProd();
// external inner function Boolean HasModQT();
// external inner function Boolean HasModRent();
// external inner function Boolean HasModRest();
// external inner function Boolean HasModRsrt();
// external inner function Boolean HasModSO();
// external inner function Boolean HasModSL();
// external inner function Boolean HasModSVO();
// external inner function Boolean HasModTS();
// external inner function Boolean HasModWHM();
// external inner function Boolean HasModDI();
// external inner function Boolean UsePostOKButton();
// external inner function Boolean HasBankImport();
// external inner function Boolean HasPLIntegratedWithNL();
// external inner function Boolean HasSLIntegratedWithNL();
// external inner function Boolean HasIntegratedNL();
// external inner function Boolean HasConsStockMoveInvoices();


// window OPDClass:2
//   wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
// begin
//   real h,h2,h3,h4,t,v,vm,vs;
//   Integer tilenr;
//   Integer f,flipnr;

//   WindowBegin("Payment",OPDClass,CGview,-);
//   SetWRect(20,80,640,464);
//   Sizeable(-1,-1,0,0);
//   UseView(OPVc);
//   ActiveFieldOnNew("PayDate");
//   h = 100; h2 = 280; h3 = 490; v = 6; vs = 20;
//   if (IsEnterprise) then begin
//     Tile(0,110,false,"",SerNr);
//   end;
//   if (HasNumberSeries) then begin
//     EditField(h,v,80,"No.",St_i,SerNr,false,TSerSClass);
//   end else begin
//     EditField(h,v,80,"No.",St_i,SerNr,false,0);
//   end;
//   EditField(h2,v,80,"Payment Date",Normal,PayDate,false,PasteCurDate);
//   if (HasModNL) then begin
//     EditField(h3,v,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
//   end;
//   EditField(h,v+=vs,30,"Payment Mode",Normal,PayMode,false,PMSClass);
//   CheckBox(h4=-100,6,0,"Ordered",OrderedFlag);
//   CheckBox(h4=-100,6+vs,0,"OK",DoneFlag);
//   EnterSkip(Math);
//   EditField(h2,v,120,"Own Bank A/C",Normal,BankAcc,false,0);
//   EditField(h3,v,82,"#Sort Code#",Normal,SortCode,false,0);
//   EditField(h,v+=vs,80,"Reference",Normal,PayNumber,false,0);
//   if (HasAdvancedAccounting) then begin
//     CheckBox(h2,v,0,"#Supp.# Info on Trans.",APonTR);
//   end;
//   if (HasLanguages) then begin
//     EditField(h3,v,82,"Language",Normal,LangCode,false,LangSClass);
//   end;
//   if (IsEnterprise) then begin
//     EditField(h,v+=vs,472,"Comment",Normal,BankName,false,0);
//   end else begin 
//     v = v + 10;
//   end;
//   EnterSkip(Math);
// //  CheckBox(h,v=6,0,"Re_jected",RejectedFlag);//not used any more
// //  CheckBox(h2,v,0,"#Supp.# Info on Trans.",APonTR);
//   tilenr = 1;
//   if (IsEnterprise) then begin
//     TileButton(tilenr,"Payments"); tilenr = tilenr + 1;
//     TileButton(tilenr,"Bank"); tilenr = tilenr + 1;
//     tilenr = 1;
//     Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
//   end;
// //  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
// //  CheckBox(25,v=-20,0,"OK",DoneFlag);
//     HalPushButton(150,-25,150+100,-5,"EPaymentQueOPDsm","Send to Bank");
//     HalPushButton(2600,-25,2500+110,-5,"FidaVista_OPEnDsm","Bank Export");//cust
//   if (HasMultiCurrency) then begin
//     EditField(-300,-21,50,"Currency",Normal,PayCurCode,false,CurncyCodeSClass);
//   end;
//   EditField(-125,-21,85,"Withdrawn",Normal,CurPayVal,true,0);
//   h = 10;
//   if (tilenr>1) then begin
//     if (HasLocalization("EST,LVA")) then begin
//       MatrixBegin(h,v=24,-50,-50,-,200);
//     end else begin
//       MatrixBegin(h,v=24,-50,-40,-,200);
//     end;
//   end else begin
//     if (HasLocalization("AUS,EST,LVA,RUS,POL") or HasMultiCurrency or HasObjects or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN"))) then begin
//       MatrixBegin(h,v+=40,-50,-40,-,200);
//     end else begin
//       MatrixBegin(h,v+=30,-30,-30,-,200);
//     end;
//   end;
//   vm = v;
//   MatTypedRow(stp);
//   MatOverStrike(ovst);
//   Flip(0);
//   MatCol(t=kPaymentRowTypeNormal,24,"Invoice No.",0,VISerNr,false,APSClass);
//   MatCol(t,105,"#Supplier#",0,VECode,false,VESClass);
//   EnterSkip(RecVal);
//   MatCol(t=kPaymentRowTypeSettlementDiscount,24,"",0,VISerNr,false,APSClass);
//   MatText(t,70,"Set. Disc.",true);
//   MatCol(t,140,"Tag/Object",0,Objects,false,ObjSClass);
//   MatCol(t,-360,"PI.Cur",0,PInvCurncy,true,0);
//   MatCol(t,-320,"Invoice Val",0,PInvVal,true,0);
//   MatCol(t,-240,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
//   MatCol(t,-200,"Bank Amount",0,BankVal,true,0);
//   MatCol(t,-120,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//   MatCol(t,-80,"Sent Value",0,RecVal,true,0);
//   MatCol(t=kPaymentRowTypeBankFee,24,"",0,VISerNr,false,APSClass);
//   MatText(t,-480,"Fee",true);
//   MatCol(t,-390,"PI.Cur",0,PInvCurncy,true,0);
//   MatCol(t,-350,"Invoice Val",0,PInvVal,true,0);
//   MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
//   MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
//   MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//   MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//   flipnr = 1;
//   if (HasMultiCurrency or HasObjects or HasRussianPrepayment or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA")) or HasLocalization("AUS")) then begin
//     Flip(flipnr); flipnr = flipnr + 1;
//   end;
//   MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//   if (HasMultiCurrency) then begin
//     MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
//     MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
//     MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//     MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//     MatCol(t,-350,"I. Cur.",0,PInvCurncy,true,0);
//     MatCol(t,-310,"Open Inv. Value",0,PInvOutstand,false,0);
//     MatCol(t,-220,"Invoice Value",0,PInvVal,true,0);
//     MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//     MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//     if (HasLocalization("POL")) then begin
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//       MatCol(t,-310,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
//       MatCol(t,-270,"Bank Amount",0,BankVal,true,0);
//       MatCol(t,-180,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
//       MatCol(t,-110,"Bank Amt. in Cur. 1",0,B1BankVal,true,0);
//     end;
//   end else begin
//     MatCol(t,-270,"Open Inv. Value",0,PInvOutstand,false,0);
//     MatCol(t,-180,"Invoice Value",0,PInvVal,true,0);
//     MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//   end;
//   if (IsEnterprise==false) then begin
//     if (HasObjects) then begin
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//       if (HasRussianPrepayment) then begin
//         if (HasModPO) then begin
//           MatCol(t,-320,"Tags/Objects",0,Objects,false,ObjSClass);
//           MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
//         end else begin
//           MatCol(t,-260,"Tags/Objects",0,Objects,false,ObjSClass);
//         end;
//         MatCol(t,-100,"Prepayment No.",0,PrepayNr,false,OPPSClass);
//       end else begin
//         MatCol(t,-160,"Tags/Objects",0,Objects,false,ObjSClass);
//       end;
//     end else begin
//       if (HasRussianPrepayment) then begin
//         Flip(flipnr); flipnr = flipnr + 1;
//         MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//         if (HasModPO) then begin
//           MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
//         end;
//         MatCol(t,-100,"Prepayment No.",0,PrepayNr,false,OPPSClass);
//       end;
//     end;
//     if ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA")) then begin
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t,360,"Bank Reference",0,BankRefStr,false,0);
//       MatCol(t,-250,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
//       MatCol(t,-110,"#V-Cd#",0,VATCode,false,VATCodeSClass);
//       MatCol(t,-80,"#VAT# Value",0,VATVal,false,0);
//     end;
//     if (HasRussianPrepayment==false and HasPrepayments) then begin 
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t=kPaymentRowTypeNormal,190,"Prepayment No.",0,PrepayNr,false,OPPSClass);
//       MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//       MatCol(t,-90,"Sent Value",0,RecVal,true,0);      
//     end;
//     if (HasLocalization("AUS")) then begin
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//       MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
//       MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
//       MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//       MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//       MatCol(t,-160,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
//       MatCol(t,-90,"#Sort Code#",0,SortCode,false,0);
//     end;
//   end else begin
//     if (StandardHansa==false) then begin
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//       MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
//       MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
//       MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//       MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//     end;
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//     MatCol(t,-320,"Order No.",0,OrderNr,false,POSClass);
//     MatCol(t,-230,"Prepayment No.",0,PrepayNr,false,OPPSClass);
//     MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//     MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//     MatCol(t,-310,"#V-Cd#",0,VATCode,false,VATCodeSClass);
//     MatCol(t,-270,"#VAT# Value",0,VATVal,false,0);
// //  MatCol(t,-200,"Extra Tax",0,TAX1Sum,false,0);
//     MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
//     MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//     MatCol(t,-260,"Tags/Objects",0,Objects,false,ObjSClass);
//     if (StandardHansa==false) then begin
//       MatCol(t,-130,"#S.# Cur",0,RecCurncy,true,CurncyCodeSClass);
//       MatCol(t,-90,"Sent Value",0,RecVal,true,0);
//       Flip(flipnr); flipnr = flipnr + 1;
//       MatCol(t=kPaymentRowTypeNormal,190,"Round Off A/C",0,RoundOffAcc,false,AccSClass);
//       MatCol(t,-270,"Round Off",0,RoundOff,true,0);
//       MatCol(t,-170,"#Instalment#",0,InstNr,false,APInstallSClass);
//       MatCol(t,-100,"Reference Number",0,rkPayNumber,false,0);
//     end else begin
//       MatCol(t=kPaymentRowTypeNormal,-170,"Round Off A/C",0,RoundOffAcc,false,AccSClass);
//       MatCol(t,-80,"Round Off A/C",0,RoundOff,true,0);
//     end;
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,190,"Creditors A/C",0,APAcc,false,AccSClass);
//     MatCol(t,-370,"Bank Reference",0,BankRefStr,false,0);
//     MatCol(t,-270,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
//     MatCol(t,-140,"#Sort Code#",0,SortCode,false,0);
//     MatCol(t,-50,"P. Code",5,PaymentCode,false,PaymentCodeSClass);//whoever added it, why not using BankRefStr ?
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,200,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
//     MatCol(t,-400,"Bank Amt.",0,BankVal,true,0);
//     MatCol(t,-330,"Bank Fee",0,BankFeeVal,true,0);
//     MatCol(t,-270,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
//     MatCol(t,-200,"B. Cur. 1 V.",0,B1BankVal,true,0);
//     MatCol(t,-130,"B. Cur. 2 V.",0,B2BankVal,true,0);
// //  MatCol(t,-120,"Fee %",0,BankFeePrc,true,0); /* What was this ?? */
//     if (StandardHansa==false) then begin
//       MatCol(t,-60,"Coef. Value",0,Coef,true,0);
//     end;
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,-470,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
//     MatCol(t,-430,"Bank Amount",0,BankVal,true,0);
//     MatCol(t,-350,"Rate",0,FrRateBankVal,true,0);
//     MatCol(t,-310,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
//     MatCol(t,-240,"To B. Cur. 2",0,ToRateB2BankVal,true,0);
//     MatCol(t,-170,"Base Rate 1",0,BaseRate1BankVal,true,0);
//     MatCol(t,-95,"Base Rate 2",0,BaseRate2BankVal,true,0);
// //    if (StandardHansa==false) then begin
// //      MatCol(t,-30,"Coef. Value",0,Coef,true,0);
// //    end;
//   end;
//   if (HasLocalization("ARG")) then begin
//     Flip(flipnr); flipnr = flipnr + 1;
//     MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
//     MatCol(t,-260,"P. Mode",0,PayMode,false,PMSClass);
//     MatCol(t,-200,"W. Tax",0,WHTax,false,WHTaxSClass);
//     MatCol(t,-100,"W. Tax Base",0,WHTaxBase,false,0);
// //    MatCol(t,-100,"W. Tax Accumul.",0,WHTaxAccumBase,false,0);
//   end;
//   InsertRowTest;
//   DeleteRowTest;
//   RowMenuBegin("");
//   if (HasSettlementDiscount) then begin
//     RowMenuItem(0,"Add Settlement Discount",' ',' ',4312,"CashDiscountOPDsm");
//   end;
//   if (HasModPL and HasModNL) then begin
//     RowMenuItem(0,"Add Bank Fee",' ',' ',4312,"NewFeeOPDsm");
//   end;
//   EndRowMenu;
//   EndMatrix;
//   vs = 20;
//   if (tilenr>1) then begin
// //    v = 18;
//     v = v + 1;
//   end;
//   if (flipnr>2) then begin
//     for (f=1;f<flipnr;f=f+1) begin
//       VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
//       v = v + vs;
//     end;
//   end;
//   if (IsEnterprise) then begin
//     Tile(tilenr,120,true,tilenr,BankAcc); tilenr = tilenr + 1;
//     v=6; h= 100;
//     EditField(h,v,120,"Own Bank A/C",Normal,BankAcc,false,0);

//     CheckBox(h2,v,0,"Foreign Payment",ForeignPayment);
//     if (HasApprovals) then begin
//       SoftEditField(h3=520,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
// /*      
//       ButtonFrame(h3=490,v=vm,123,6,"Approval Status");
//       RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
//       RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
//       RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
//       RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
//       RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
//       RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
// */      
// /*
//   CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
//   CheckBox(25,v=-20,0,"OK",DoneFlag);
//   HalPushButton(150,-30,150+100,-5,"EPaymentQueOPDsm","Send to Bank");
// */
//     end;
//     ButtonFrame(h=40,vm=(v+=40),123,3,"Payment Format");
//     RadioButton(h,v,0,0,"Per Row",PayperSupplier);
//     RadioButton(h,v+=16,1,0,"Per #Supplier#",PayperSupplier);
//     RadioButton(h,v+=16,2,0,"Batch",PayperSupplier);
//     ButtonFrame(h2=190,v=vm,123,3,"Payment Method");
//     RadioButton(h2,v,0,0,"Normal",PayMethod);
//     RadioButton(h2,v+=16,1,0,"Express",PayMethod);
//     RadioButton(h2,v+=16,2,0,"Extra urgent",PayMethod);
//     ButtonFrame(h3=340,v=vm,123,3,"Bank Fees");
//     RadioButton(h3,v,0,0,"We pay",Bankfees);
//     RadioButton(h3,v+=16,1,0,"#Suppliers# pay",Bankfees);
//     RadioButton(h3,v+=16,2,0,"Shared",Bankfees);
    
//   end;
//   if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
//     SpecialMenu("Payment Status",'r',4,"OPStatusDsm");
//     if (HasModPL and HasModNL) then begin
//       SpecialMenu("Add Bank Fee",' ',3,"NewFeeOPDsm");
//     end;
//     if (IsEnterprise) then begin
// //    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
//       SpecialMenu("(-",' ',1,"");
//       SpecialMenu("Add Settlement Discount",' ',2,"CashDiscountOPDsm");
//     end;
//     if (HasIntegratedNL) then begin
//       SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromOP");
//     end;
//   end else begin
//   //    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
//     if (HasIntegratedNL) then begin
//       SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromOP");
//     end;
//     if (IsEnterprise) then begin
//   //    SpecialMenu("Open Withholding Certificate",'',5,"OpenWHCertificateOPDsm");
//       if (StandardHansa==false) then begin
//         SpecialMenu("Assign #Cheque# Number",' ',6,"AssignChequeOPDsm");
//         SpecialMenu("Prepare #Cheque#",'e',9,"PrepChequesOPDsm");
//         SpecialMenu("Print #Cheques#",' ',9,"PrintChequesOPDsm");
//       end;
//     end;
//     if (HasWithholdingTax) then begin
//       SpecialMenu("Calculate Withholding Taxes",' ',11,"WithholdTaxesOPDsm");
//     end;
//     if (IsEnterprise) then begin
//       SpecialMenu("Payment Status",'r',4,"OPStatusDsm");
//       SpecialMenu("Bank Statement",' ',12,"BankStOPDsm");
//       if (HasLocalization("EST,LVA")) then begin
//         SpecialMenu("E-Payment Status",' ',13,"EPaymentStatusOPDsm");
//       end;
//       SpecialMenu("Print Cash IN-OUT",' ',4,"PrintCashInOutOPDsm");
//       SpecialMenu("Banking File Export",'',4,"BankingFileExportDsm");
//     end else begin
//       if (HasLocalization("AUS")) then begin
//         SpecialMenu("Banking File Export",'',4,"BankingFileExportDsm");
//       end;
//     end;
//     if (HasApprovals) then begin
//       SpecialMenu("Request Approval",' ',6,"OPSendforAcceptanceOPDsm");
//       SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
//     end;
//     SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//     if (HasDownpayments) then begin
//       SpecialMenu("Down Payment",' ',7,"DownPayFromOPDsm");
//     end;
//     if (IsEnterprise) then begin
//       SpecialMenu("Cash Out",' ',8,"CLOutFromOPDsm");
//     end;
//     if (HaseMail) then begin
//       SpecialMenu("Email",'m',9,"CreateMailFromOPDsm");
//     end;
//     if (HasLocalization("HRV,RUS,SLV,SRB,SVN,UKR") and (HasIntegratedNL or IsEnterprise)) then begin
//       SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm");
//     end;
//     if (HasLocalization("POL") and IsEnterprise) then begin
//       SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm");
//     end;
//   end;
//   EndWindow;
// end;